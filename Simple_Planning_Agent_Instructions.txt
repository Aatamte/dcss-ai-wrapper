Simple Planning Agent Instructions
------------

The simple planning agent is already wired up in main.py, so running the agent is normal

- Run the webserver
- python3 main.py explore

The agent is currently using context4.txt, which was generated by running the main in action_exploration.py
This is the script that has the ContextGenerator class, which does what it says on the tin.

The repo also premaked context lists context3.txt, context4.txt, and context5.txt, which you can switch to by changing line 40 of simple_planning_agent.py

These files coorespond to the number of statements in each context.

Agent behavior
1) Reads in contexts from file (these can actually be of mixed length)
2) Takes 10 random steps (see line 25)
3) Picks a random context from a set of the least seen, possible contexts
4) Shuffles a random list of possibly instances of that context (might not exist)
5) Builds plans for each instance and send them to ff until one of them produces a working plan
6) Excutes that plan one step at a time
7) Return to step 3

ContextGenerator explanation
-------------

The ContextGenerator generators a list of contexts with N statements based on a number of rules and a given set of methods, object subsitutions and instances.

Requirements for a valid statement:
- statement is not in existing statements
- there is at least one non-constant parameter or return value
- creates at most two new variables
- parameters and return value are unique
- seperate variables are not assigned to the same value
- new variables not of type player, tile, bool, int_constant or object

Requirements for a valid context:
- all variables must have at least two references
- the context is not redundant with any other context
- at least one function must have 'player' as the first argument
- one or less statement exist using the function 'at' for the object 'player' or 'tile'


Requirements for a valid context in terms of the current state:
- There are valid substitutions of the provided instances with the object types within the statements for the current state
- the numeric statements are valid against the state
    - supports subtractions statements 
    - checks for trival equalities 
    - validates equalities for variables with known values